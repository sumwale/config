#!/bin/bash

set -e

# Simple script to run a full backup using borgmatic with given options. Uses notify-send
# to show success/failure popups. If this is being launched by the root user, then it
# will need "--user <USER>" as the first two arguments to specify the current
# logged in user where the notifications will be sent.
#
# Script assumes no spaces or weird characters in $USER and $HOME.

if [ $(id -u) -eq 0 ]; then
  borgmatic_conf=/etc/borgmatic/config.yaml
  stat_cmd="systemctl status"
else
  borgmatic_conf=$HOME/.config/borgmatic/config.yaml
  stat_cmd="systemctl --user status"
fi

# switch HOME and DBUS_SESSION_BUS_ADDRESS etc to the given user, if provided
if [ "$1" = "--user" ]; then
  shift
  export USER=$1
  shift
  export HOME=$(getent passwd $USER | cut -d: -f6)
  cd $HOME
  # notify-send won't work as root and has to be executed as the provided user
  do_sudo="sudo -E -u $USER"
fi

xdg_rt_dir=/run/user/$(id -u $USER)
for ssh_sock in gcr/ssh keyring/ssh; do
  if [ -w "$xdg_rt_dir/$ssh_sock" ]; then
    export SSH_AUTH_SOCK="$xdg_rt_dir/$ssh_sock"
    break
  fi
done
export DBUS_SESSION_BUS_ADDRESS=unix:path=$xdg_rt_dir/bus
export PATH="$PATH:$HOME/.local/bin"
export GPG_ID=sumwale@gmail.com

if ! ping -q -c 1 8.8.8.8 >/dev/null && ! ping -q -c 1 8.8.4.4 >/dev/null; then
  echo -e '\033[31mAborting backup due to unreachable network\033[00m'
  $do_sudo notify-send -i document-save -u critical -t 0 "Backup aborted" "Network is unreachable"
  exit 1
fi

echo -e '\033[32mRunning pre-backup actions\033[00m'
$do_sudo borgmatic-setup

echo -e '\033[32mCreating backup of KeePassXC and network configurations\033[00m'
borg_local_backups=/var/opt/borg/backups
mkdir -p $borg_local_backups && chmod 0700 $borg_local_backups
kp_backup_base=$borg_local_backups/keepassxc-unlock
mkdir -p $kp_backup_base && chmod 0700 $kp_backup_base
for kp_dir in /etc/keepassxc-unlock/*; do
  kp_backup_dir=$kp_backup_base/$(basename $kp_dir)
  mkdir -p $kp_backup_dir && chmod 0700 $kp_backup_dir
  rm -f $kp_backup_dir/*
  for kp_conf in $kp_dir/*.conf; do
    kp_conf_name=$(basename $kp_conf .conf)
    kp_conf_gpg=$kp_backup_dir/$kp_conf_name.gpg
    rm -f $kp_conf_gpg
    { head -3 $kp_conf; tail -n+4 $kp_conf | systemd-creds --name=$kp_conf_name decrypt - -; } | \
      $do_sudo gpg -r $GPG_ID -o - --encrypt - > $kp_conf_gpg
    chmod 0400 $kp_conf_gpg
  done
  if [ -f $kp_dir/keepassxc.sha512 ]; then
    cp -af $kp_dir/keepassxc.sha512 $kp_backup_dir/keepassxc.sha512
  fi
done
net_backup=$borg_local_backups/networks-backup.gpg
rm -f $net_backup
pushd / >/dev/null
tar -cpSf - etc/netplan etc/NetworkManager/system-connections | zstd -10 -T8 -c - | \
  $do_sudo gpg -r $GPG_ID -o - --encrypt - > $net_backup && chmod 0400 $net_backup
popd >/dev/null

start=$(date +'%s.%N')
$do_sudo notify-send -i document-save -u normal -t 10000 "Backup started" "Started on $(date +'%b %d %H:%M:%S'). Status can be seen with '$stat_cmd borgmatic-backup.service'"

if systemd-inhibit --who="borgmatic" --what="idle:sleep:shutdown:handle-lid-switch" --why="Prevent interrupting backup" borgmatic -c $borgmatic_conf "$@"; then
  end=$(date +'%s.%N')
  elapsed=$(bc -l <<< "scale=2; ($end - $start + 0.005) / 1")
  $do_sudo notify-send -i document-save -u normal -t 10000 "Backup finished" "Finished on $(date +'%b %d %H:%M:%S') in $elapsed secs. Detailed logs can be seen with 'journalctl -t borgmatic'"
else
  $do_sudo notify-send -i document-save -u critical -t 0 "Backup failed" "Check 'journalctl -t borgmatic' for details: $(journalctl -t borgmatic | tail -n5)"
  exit 1
fi
