# mask permissions for others by default
umask 027
# set PATH to include user's private bin and cargo
GCMDIR=/gcm
if [ -e /usr/local/jdk11 ]; then
  IDEA_JDK=/usr/local/jdk11
  export IDEA_JDK
fi
JAVA8_HOME=/usr/local/jdk8
#JAVA_HOME=$JAVA8_HOME
BROWSER=firefox
if which chromium 2>/dev/null >/dev/null; then
  CHROME_BIN="`which chromium 2>/dev/null`"
  export CHROME_BIN
fi
#DOCKER_BUILDKIT=1
CHORUS_SERVICE_TYPE=ClusterIP
ALPINE_HADOOP_VERSION=cdh54
PYSPARK_DRIVER_PYTHON=ipython3
#CLUTTER_VBLANK=none

# WAYLAND_DISPLAY may not be set yet, so check session type
session_type="`loginctl --property=Type --value show-session auto`"
if [ "$session_type" = "wayland" ]; then
  QT_QPA_PLATFORM=wayland
  export QT_QPA_PLATFORM
fi

if [ -z "$SSH_AUTH_SOCK" ]; then
  xdg_rt_dir="${XDG_RUNTIME_DIR:-/run/user/`id -u`}"
  for ssh_sock in gcr/ssh keyring/ssh; do
    if [ -w "$xdg_rt_dir/$ssh_sock" ]; then
      SSH_AUTH_SOCK="$xdg_rt_dir/$ssh_sock"
      export SSH_AUTH_SOCK
      break
    fi
  done
fi

if [ "$session_type" = "wayland" -o "$session_type" = "x11" ]; then
  if [ -x /usr/lib/seahorse/ssh-askpass ]; then
    SSH_ASKPASS=/usr/lib/seahorse/ssh-askpass
  elif [ -x /usr/libexec/seahorse/ssh-askpass ]; then
    SSH_ASKPASS=/usr/libexec/seahorse/ssh-askpass
  elif [ -x /usr/bin/ssh-askpass ]; then
    SSH_ASKPASS=/usr/bin/ssh-askpass
  fi
  if [ -n "$SSH_ASKPASS" ]; then
    SSH_ASKPASS_REQUIRE=prefer
    export SSH_ASKPASS SSH_ASKPASS_REQUIRE
  fi
fi

# ydotool socket path used by /etc/systemd/system/ydotoold.service
YDOTOOL_SOCKET=/tmp/ydotool-1000/.ydotool_socket

# required for conda environments
TERMINFO_DIRS=/usr/share/terminfo
PATH="$PATH:$JAVA8_HOME/bin:$HOME/.local/bin:$HOME/.cargo/bin:$HOME/.krew/bin"

export GCMDIR JAVA8_HOME BROWSER DOCKER_BUILDKIT DOCKER_TEAM_STUDIO_REPO CHORUS_SERVICE_TYPE ALPINE_HADOOP_VERSION PYSPARK_DRIVER_PYTHON YDOTOOL_SOCKET TERMINFO_DIRS PATH

# gcloud python and new gke plugin
CLOUDSDK_PYTHON=python3
USE_GKE_GCLOUD_AUTH_PLUGIN=True

# k8s config files
KUBECONFIG="$HOME/.kube/config"
if [ -d "$HOME/.kube/configs" ]; then
  for f in $HOME/.kube/configs/*; do
    if [ -r "$f" ]; then
      KUBECONFIG="$KUBECONFIG:$f"
    fi
  done
fi
export CLOUDSDK_PYTHON USE_GKE_GCLOUD_AUTH_PLUGIN KUBECONFIG

FD_CMD=fd
type fdfind 2>/dev/null >/dev/null && FD_CMD=fdfind
FZF_DEFAULT_COMMAND="$FD_CMD --hidden --strip-cwd-prefix --exclude .git"
FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND --type d"
export FD_CMD FZF_DEFAULT_COMMAND FZF_CTRL_T_COMMAND FZF_ALT_C_COMMAND

[ -r "$HOME/.sh_env.local" ] && . "$HOME/.sh_env.local"

SHENV_READ=1
export SHENV_READ
